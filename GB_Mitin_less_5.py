'''
4) Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Необходимо написать программу, открывающую файл на чтение и считывающую построчно
данные. При этом английские числительные должны заменяться на русские. Новый блок строк
должен записываться в новый текстовый файл.

5) Создать (программно) текстовый файл, записать в него программно набор чисел,
разделенных пробелами. Программа должна подсчитывать сумму чисел в файле и выводить
ее на экран.

6) Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный
предмет и наличие лекционных, практических и лабораторных занятий по этому предмету и их
количество. Важно, чтобы для каждого предмета не обязательно были все типы занятий.
Сформировать словарь, содержащий название предмета и общее количество занятий по нему.
Вывести словарь на экран.
Примеры строк файла: Информатика: 100(л) 50(пр) 20(лаб).
Физика: 30(л) — 10(лаб)
Физкультура: — 30(пр) —
Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}

7) Создать вручную и заполнить несколькими строками текстовый файл, в котором каждая
строка должна содержать данные о фирме: название, форма собственности, выручка,
издержки.
Пример строки файла: firm_1 ООО 10000 5000.
Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также
среднюю прибыль. Если фирма получила убытки, в расчет средней прибыли ее не включать.
Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а
также словарь со средней прибылью. Если фирма получила убытки, также добавить ее в
словарь (со значением убытков).
Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
Итоговый список сохранить в виде json-объекта в соответствующий файл.
Пример json-объекта:
[{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
Подсказка: использовать менеджер контекста.
'''
'''
4) Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Необходимо написать программу, открывающую файл на чтение и считывающую построчно
данные. При этом английские числительные должны заменяться на русские. Новый блок строк
должен записываться в новый текстовый файл.
'''
dict_Conv_numeral = [
    {'en': 'one', 'ru': 'один'},
    {'en': 'two', 'ru': 'два'},
    {'en': 'three', 'ru': 'три'},
    {'en': 'four', 'ru': 'четыре'}
]

def user_translate_str(str):
    '''
    Перевод первого числительного с английского на русский
    строка: 'One xxxxx' будет заменена на  'Один  xxxxx'
    (если перевод не известен вернет строку без изменений.)
    :param str - строка для перевода:
    :return вернет строку:
    '''
    lst_str_words = str.split(' ')
    first_w = lst_str_words[0].lower()
    for el in dict_Conv_numeral:
        if el['en'] == first_w:
            lst_str_words[0] = el['ru'].title()

    result = ' '.join(lst_str_words)
    return result

def user_translate(fname):
    '''
    открывает файл fname на чтение и считывает построчно данные.
    При этом английские числительные должны заменяться на русские.
    Новый блок строк должен записываться в новый текстовый файл.
    Вернет название полученного файла с перевом в случае если все ОК
    '''
    try:
        outFname = fname.split('.')
        outFname[0] += '_tr.'
        str_outFname = ''.join(outFname)
        with open(fname, 'r', encoding='utf-8') as inpFile:
            with open(str_outFname, 'w', encoding='utf-8') as outFile:
                for str in inpFile:
                    outFile.write( user_translate_str(str) )
        return str_outFname

    except IOError as err:
        print(f'ERROR in user_translate(): {err}')
        return None

print(f"Получили файл '{ user_translate('one_two_free_for.txt')}' с переводом.")


'''
5) Создать (программно) текстовый файл, записать в него программно набор чисел,
разделенных пробелами. Программа должна подсчитывать сумму чисел в файле и выводить
ее на экран.
'''
import random

def user_genFile_wDigs():
    fname = 'File_wDigs.txt'

    with open(fname, 'w', encoding='utf-8') as oFile:
        res = []
        summ = 0
        for i in range(20):
            dig = random.randint(1, 1001)
            res.append(str(dig))
            summ += dig
        oFile.write(' '.join(res))
    return f'Записали в файл: \'{fname}\' список чисел:\n {res}\n Сумма чисел:{summ}'

print ( user_genFile_wDigs() )







